from flask import Flask, render_template, request
import pandas as pd
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
from sklearn.neighbors import NearestNeighbors
import os
import webbrowser
import threading

# Carregar os dados
data = pd.read_csv(os.path.join(os.path.dirname(__file__), 'data.csv'))

# Preprocessar os dados
df_knn = data[['category_name', 'author', 'stars', 'price']].copy()

# Codificação de variáveis categóricas
label_encoder_category = LabelEncoder()
df_knn['category_encoded'] = label_encoder_category.fit_transform(df_knn['category_name'])

# Normalização das características numéricas
scaler = MinMaxScaler()
df_knn[['stars_normalized', 'price_normalized']] = scaler.fit_transform(df_knn[['stars', 'price']])

# Prepare as características para o KNN
X = df_knn[['category_encoded', 'stars_normalized', 'price_normalized']]
knn = NearestNeighbors(n_neighbors=5, algorithm='auto', metric='euclidean')
knn.fit(X)

app = Flask(__name__, template_folder='../views', static_folder='../css')

BOOKS_PER_PAGE = 90

@app.route('/', methods=['GET'])
def index():
    search_query = request.args.get('search')
    page = int(request.args.get('page', 1))

    if search_query:
        filtered_books = data[data['title'].str.contains(search_query, case=False, na=False)]
    else:
        filtered_books = data
    
    total_books = filtered_books.shape[0]
    total_pages = (total_books + BOOKS_PER_PAGE - 1) // BOOKS_PER_PAGE
    start_index = (page - 1) * BOOKS_PER_PAGE
    end_index = start_index + BOOKS_PER_PAGE
    books = filtered_books[start_index:end_index][['title', 'imgUrl', 'category_name', 'author', 'price', 'stars']].to_dict(orient='records')

    return render_template('index.html', books=books, total_pages=total_pages, current_page=page)

@app.route('/recommend', methods=['POST'])
def recommend():
    book_title = request.form['title']
    
    selected_book_index = data[data['title'] == book_title].index[0]
    
    selected_book_features = X.iloc[selected_book_index].values.reshape(1, -1)
    distances, indices = knn.kneighbors(selected_book_features)

    recommended_books = data.iloc[indices[0]][['title', 'imgUrl', 'category_name', 'author', 'price', 'stars']].to_dict(orient='records')

    # Defina um limite de distância (ex: 1.0)
    distance_limit = 1.0
    filtered_books = [book for i, book in enumerate(recommended_books) if distances[0][i] <= distance_limit]

    average_distance = distances[0][1:].mean() if len(filtered_books) > 0 else None

    return render_template('recommendations.html', books=filtered_books, average_distance=average_distance)

def open_browser():
    webbrowser.open("http://127.0.0.1:5000/", new=2)  # Usar new=2 para tentar abrir em uma nova aba

if __name__ == '__main__':
    # Iniciar o navegador em uma nova aba
    threading.Timer(1, open_browser).start()
    app.run(debug=True)
